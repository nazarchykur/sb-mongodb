MongoDB $lte


    Summary: 
        in this tutorial, you will learn how to use the MongoDB $lte operator to select documents where the value of a 
        field is less than or equal to a specified value.
    
    
    
        Introduction to the MongoDB $lte operator
            The $lte is a comparison query operator that allows you to select documents where the value of a field is 
            less than or equal to ( <= ) a specified value.
            
            The following shows the $lte syntax:
            
                {field: {$lte: value} }



    MongDB $lte operator examples
        Weâ€™ll use the following products collection:
        
        db.products.drop();
        db.products.insertMany([
            { "_id" : 1, "name" : "xPhone", "price" : 799, "releaseDate": ISODate("2011-05-14"), "spec" : { "ram" : 4, "screen" : 6.5, "cpu" : 2.66 },"color":["white","black"],"storage":[64,128,256]},
            { "_id" : 2, "name" : "xTablet", "price" : 899, "releaseDate": ISODate("2011-09-01") , "spec" : { "ram" : 16, "screen" : 9.5, "cpu" : 3.66 },"color":["white","black","purple"],"storage":[128,256,512]},
            { "_id" : 3, "name" : "SmartTablet", "price" : 899, "releaseDate": ISODate("2015-01-14"), "spec" : { "ram" : 12, "screen" : 9.7, "cpu" : 3.66 },"color":["blue"],"storage":[16,64,128]},
            { "_id" : 4, "name" : "SmartPad", "price" : 699, "releaseDate": ISODate("2020-05-14"),"spec" : { "ram" : 8, "screen" : 9.7, "cpu" : 1.66 },"color":["white","orange","gold","gray"],"storage":[128,256,1024]},
            { "_id" : 5, "name" : "SmartPhone", "price" : 599,"releaseDate": ISODate("2022-09-14"), "spec" : { "ram" : 4, "screen" : 5.7, "cpu" : 1.66 },"color":["white","orange","gold","gray"],"storage":[128,256]}
         ]);



    1) Using $lte operator to select documents where the value of a field is less than or equal to a specified value
        The following example uses the $gte operator to select documents from the products collection where price is less than 799:
        
            db.products.find({
                price: {
                    $lte: 799
                }
            }, {
                name: 1,
                price: 1
            })

        Output:
        
            [
              { _id: 1, name: 'xPhone', price: 799 },
              { _id: 4, name: 'SmartPad', price: 699 },
              { _id: 5, name: 'SmartPhone', price: 599 }
            ]



    2) Using the $lte operator to check if the value of a field in an embedded document is less than or equal to a value
        The following query uses $lte operator to select documents where the value of the screen field in the spec 
        document is less than or equal to 6.5:
        
            db.products.find({
                "spec.screen": {
                    $lte: 6.5
                }
            }, {
                name: 1,
                "spec.screen": 1
            })

        Output:
        
            [
              { _id: 1, name: 'xPhone', spec: { screen: 6.5 } },
              { _id: 5, name: 'SmartPhone', spec: { screen: 5.7 } }
            ]



    3) Using the $lte operator to check if an array element is less than or equal to a value
        The following example uses the $lte operator to query the products collection to find all documents where the 
        array storage has at least one element less than or equal to 64:
        
            db.products.find({
                storage: {
                    $lte: 64
                }
            }, {
                name: 1,
                storage: 1
            })

        The query returned the following documents:
        
            [
              { _id: 1, name: 'xPhone', storage: [ 64, 128, 256 ] },
              { _id: 3, name: 'SmartTablet', storage: [ 16, 64, 128 ] }
            ]



    4) Using the $lte operator to check if the value of a field is before or on the same date
        The following query uses the $lte operator to select documents from the products collection to find all documents 
        where the release date is before or on 2011-09-01:
        
            db.products.find({
                "releaseDate": {
                    $lte: new ISODate('2011-09-01')
                }
            }, {
                name: 1,
                releaseDate: 1
            });

        The query returned the following documents:
        
            [
              {
                _id: 1,
                name: 'xPhone',
                releaseDate: ISODate("2011-05-14T00:00:00.000Z")
              },
              {
                _id: 2,
                name: 'xTablet',
                releaseDate: ISODate("2011-09-01T00:00:00.000Z")
              }
            ]


    Summary
        Use the $lte operator to select documents where the value of a field is less than or equal to a specified value.